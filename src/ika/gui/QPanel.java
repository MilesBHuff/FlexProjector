/*
 * QPanel.java
 *
 * Created on November 16, 2007, 12:00 PM
 */

package ika.gui;

import ika.proj.QModel;
import java.awt.Component;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 * A panel for configuring the parameters for the Q acceptance index.
 * @author  Bernhard Jenny, Institute of Cartography, ETH Zurich.
 */
public class QPanel extends javax.swing.JPanel {
    
    private final QModel qModel;
    
    private boolean updatingGUI = false;
    
    /** Creates new form QPanel */
    public QPanel(QModel qModel) {
        this.qModel = qModel;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel qAngleLabel = new javax.swing.JLabel();
        javax.swing.JLabel qAreaLabel = new javax.swing.JLabel();
        qAngleSlider = new javax.swing.JSlider();
        qAreaSlider = new javax.swing.JSlider();
        qAngleValueLabel = new javax.swing.JLabel();
        qAreaValueLabel = new javax.swing.JLabel();
        qDefaultButton = new javax.swing.JButton();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        showAcceptableAreaCheckBox = new javax.swing.JCheckBox();
        liveUpdateCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new java.awt.GridBagLayout());

        qAngleLabel.setText("Acceptable Maximum Angular Distortion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(qAngleLabel, gridBagConstraints);

        qAreaLabel.setText("Acceptable Maximum Area Distortion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(qAreaLabel, gridBagConstraints);

        qAngleSlider.setMajorTickSpacing(15);
        qAngleSlider.setMaximum(90);
        qAngleSlider.setMinorTickSpacing(5);
        qAngleSlider.setPaintLabels(true);
        qAngleSlider.setPaintTicks(true);
        qAngleSlider.setToolTipText("Select what maximum angular distortion you can accept.");
        qAngleSlider.setValue(40);
        qAngleSlider.setPreferredSize(new java.awt.Dimension(350, 52));
        qAngleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        add(qAngleSlider, gridBagConstraints);
        {
            JSlider slider = qAngleSlider;
            java.util.Hashtable labels = slider.createStandardLabels(slider.getMajorTickSpacing());
            java.util.Enumeration e = labels.elements();
            while(e.hasMoreElements()) {
                javax.swing.JComponent comp = (javax.swing.JComponent)e.nextElement();
                if (comp instanceof javax.swing.JLabel) {
                    javax.swing.JLabel label = (javax.swing.JLabel)(comp);
                    label.setText(label.getText() + "\u00b0");
                }
            }
            slider.setLabelTable(labels);
        }

        qAreaSlider.setMajorTickSpacing(50);
        qAreaSlider.setMaximum(300);
        qAreaSlider.setMinimum(100);
        qAreaSlider.setMinorTickSpacing(10);
        qAreaSlider.setPaintLabels(true);
        qAreaSlider.setPaintTicks(true);
        qAreaSlider.setToolTipText("Select what maximum areal distortion you can accept.");
        qAreaSlider.setValue(150);
        qAreaSlider.setPreferredSize(new java.awt.Dimension(350, 52));
        qAreaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        add(qAreaSlider, gridBagConstraints);
        Hashtable labelTable = new Hashtable();
        labelTable.put( new Integer( 100 ), new JLabel("Eq.-Area") );
        labelTable.put( new Integer( 200 ), new JLabel("50-200%") );
        labelTable.put( new Integer( 300 ), new JLabel("33-300%") );
        qAreaSlider.setLabelTable( labelTable );

        qAngleValueLabel.setText("-");
        qAngleValueLabel.setMaximumSize(new java.awt.Dimension(35, 16));
        qAngleValueLabel.setMinimumSize(new java.awt.Dimension(35, 16));
        qAngleValueLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(qAngleValueLabel, gridBagConstraints);

        qAreaValueLabel.setText("-");
        qAreaValueLabel.setMaximumSize(new java.awt.Dimension(35, 16));
        qAreaValueLabel.setMinimumSize(new java.awt.Dimension(35, 16));
        qAreaValueLabel.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(qAreaValueLabel, gridBagConstraints);

        qDefaultButton.setText("Reset to Default");
        qDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qDefaultButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(qDefaultButton, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 11));
        jLabel5.setText("<html>The acceptance index is the percentage of points that have <br> acceptable distortion characteristics. Use the sliders to adjust how <br> much angular and areal distortion you can accept, and observe the <br> Acc. column in the distortion table and the acceptance visualization <br>in the map.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(jLabel5, gridBagConstraints);

        showAcceptableAreaCheckBox.setText("Show Acceptable Area in Map");
        showAcceptableAreaCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        showAcceptableAreaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAcceptableAreaCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        add(showAcceptableAreaCheckBox, gridBagConstraints);

        liveUpdateCheckBox.setText("Live Update");
        liveUpdateCheckBox.setToolTipText("If enabled, the Acc. column and the acceptance visualization change as you drag the sliders. Disable on slower computers.");
        liveUpdateCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        liveUpdateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                liveUpdateCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(liveUpdateCheckBox, gridBagConstraints);

        jLabel1.setText("<html><small>Disable on slower computers.</small></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 21, 0, 0);
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void qSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qSliderStateChanged
        
        javax.swing.JSlider slider = (javax.swing.JSlider)evt.getSource();
        this.updateQLabels();
        boolean update = slider.getValueIsAdjusting() == false
                || this.liveUpdateCheckBox.isSelected();
        if (update) {
            this.readGUI();
        }
        
    }//GEN-LAST:event_qSliderStateChanged

    private void showAcceptableAreaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAcceptableAreaCheckBoxActionPerformed
        
        qModel.setShowAcceptableArea(showAcceptableAreaCheckBox.isSelected());
        
    }//GEN-LAST:event_showAcceptableAreaCheckBoxActionPerformed
    
    public void showQPanel(Component parentComponent) {
        
        try {
            
            if (this.updatingGUI)
                return;
            this.updatingGUI = true;
        
            // init angle slider
            double angle = this.qModel.getQMaxAngle();
            this.qAngleSlider.setValue((int)Math.round(Math.toDegrees(angle)));
            
            // init area slider
            double area = this.qModel.getQMaxAreaScale();
            this.qAreaSlider.setValue((int)(area * 100d));
            
            // init show / hide accepted area in map
            this.showAcceptableAreaCheckBox.setSelected(qModel.isShowAcceptableArea());
            
            // init live update
            this.liveUpdateCheckBox.setSelected(qModel.isLiveUpdate());
            
            // draw initial values of labels
            this.updateQLabels();
            
            // show the dialog
            JOptionPane.showMessageDialog(parentComponent, this, 
                    "Acceptance Index", JOptionPane.PLAIN_MESSAGE);
            
        } finally {
            this.updatingGUI = false;
        }
        
   }
    
    private void readGUI() {
    
        try {
            if (this.updatingGUI)
                return;
            this.updatingGUI = true;
        
            double qAngle = Math.toRadians(this.qAngleSlider.getValue());
            double qArea = this.qAreaSlider.getValue() / 100.;
            this.qModel.setQ(qAngle, qArea);
            this.qModel.setLiveUpdate(this.liveUpdateCheckBox.isSelected());
        } finally {
            this.updatingGUI = false;
        }
        
    }
    
    private void qDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qDefaultButtonActionPerformed
        
        try {
            if (this.updatingGUI)
                return;
            this.updatingGUI = true;
        
            this.qAngleSlider.setValue(QModel.DEFAULT_MAX_ANGLE_DEG);
            this.qAreaSlider.setValue(QModel.DEFAULT_MAX_AREA_PERC);
            this.readGUI();
        } finally {
            this.updatingGUI = false;
        }
        
    }//GEN-LAST:event_qDefaultButtonActionPerformed

    private void liveUpdateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_liveUpdateCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_liveUpdateCheckBoxActionPerformed
    
    /**
     * Update text of labels with values of max angle and max area scale for Q factor.
     */
    private void updateQLabels() {
        final int qAngle = this.qAngleSlider.getValue();
        if (qAngle == 0) {
            this.qAngleValueLabel.setText("Conformal");
        } else {
            this.qAngleValueLabel.setText(qAngle + "\u00B0");
        }

        final int qArea = this.qAreaSlider.getValue();
        if (qArea == 100) {
            this.qAreaValueLabel.setText("Equal-area");
        } else {
            int qMin = (int)Math.round(100. * 100. / qArea);
            this.qAreaValueLabel.setText(qMin + "% to " + qArea + "%");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox liveUpdateCheckBox;
    private javax.swing.JSlider qAngleSlider;
    private javax.swing.JLabel qAngleValueLabel;
    private javax.swing.JSlider qAreaSlider;
    private javax.swing.JLabel qAreaValueLabel;
    private javax.swing.JButton qDefaultButton;
    private javax.swing.JCheckBox showAcceptableAreaCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
